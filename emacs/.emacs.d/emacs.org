* general
#+BEGIN_SRC emacs-lisp
  (use-package general
    :init
    (general-auto-unbind-keys))
#+END_SRC
** s-SPC (general)
#+BEGIN_SRC emacs-lisp
  (general-create-definer leader-super-spc
    :prefix "s-SPC")

  (leader-super-spc
    "s" 'shell)

  (leader-super-spc
    "p" 'macro/projectile)
#+END_SRC
** s-a (agenda)
#+BEGIN_SRC emacs-lisp
  (general-create-definer leader-super-agenda
    :prefix "s-a")
#+END_SRC
* exwm
** setup
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t)

  (use-package dmenu
    :ensure t)

  (require 'exwm-config)
  (exwm-config-default)

  ;; systemtray
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)
  (setq exwm-systemtray-height 16)

  ;; workspace
  (setq exwm-workspace-show-all-buffers t ; show buffers on other workspaces
        exwm-layout-show-all-buffers t	; switch to buffers on other workspaces	
        ;; exwm-workspace-number 1		; initial workspace number
        )
#+END_SRC
** xrandr
*** Olivia
#+BEGIN_SRC emacs-lisp
  (if (string-equal system-name "olivia")
      (progn
        (require 'exwm-randr)
        (setq exwm-randr-workspace-output-plist '(1 "HDMI1" 2 "eDP1" 3 "DP2"))
        (add-hook 'exwm-randr-refresh-hook
                  (lambda ()
                    (start-process-shell-command
                     "xrandr" nil "xrandr --output HDMI1 --left-of eDP1 --auto; xrandr --output DP2 --right-of eDP1 --auto")))
        (exwm-randr-enable)))
#+END_SRC
** binds
*** window
#+BEGIN_SRC emacs-lisp
(exwm-input-set-key (kbd "s-h") 'windmove-left)
(exwm-input-set-key (kbd "s-j") 'windmove-down)
(exwm-input-set-key (kbd "s-k") 'windmove-up)
(exwm-input-set-key (kbd "s-l") 'windmove-right)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-s") 'split-window-horizontally)
(exwm-input-set-key (kbd "s-v") 'split-window-vertically)
(exwm-input-set-key (kbd "s-d") 'kill-buffer-and-window)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-f") 'exwm-reset)
#+END_SRC
*** applications
#+BEGIN_SRC emacs-lisp
  (exwm-input-set-key (kbd "s-c")
                      (lambda () (interactive) (start-process "" nil "chromium")))
  (exwm-input-set-key (kbd "s-r") 'counsel-linux-app)
  (exwm-input-set-key (kbd "s-u") 'ansi-term)
  (push ?\s-\  exwm-input-prefix-keys)
  (push ?\s-a exwm-input-prefix-keys)

  ;; toggle layout
  (defun hesam/keybr-toggle-layout ()
    (interactive)
    (shell-command "source ~/Dropbox/keys.sh")
    (let ((default-directory "~"))
      (shell-command "(setxkbmap -query | grep -q 'layout:.*us') && setxkbmap se || setxkbmap us")
      (message nil)				; suppress shell-cmd msg
      ;; echo new layout in use
      (message (shell-command-to-string "setxkbmap -query | grep 'layout.*' | tr '\n' ' '"))))
  (exwm-input-set-key (kbd "s-t") 'hesam/keybr-toggle-layout)
#+END_SRC
*** simulation keys
#+BEGIN_SRC emacs-lisp
  (setq exwm-input-simulation-keys
        '(([?\C-b] . [left])
          ([?\C-f] . [right])
          ([?\C-p] . [up])
          ([?\C-n] . [down])
          ([?\C-a] . [home])
          ([?\C-e] . [end])
          ([?\M-v] . [prior])
          ([?\C-v] . [next])
          ([?\C-d] . [delete])
          ([?\C-k] . [S-end delete])))
#+END_SRC
* emms
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :config
    (emms-all))
#+END_SRC
* calendar
#+BEGIN_SRC emacs-lisp
  ;; start with Mon
  (setq calendar-week-start-day 1)

  ;; EU style
  (setq calendar-date-style 'european)

  ;; Date format
  (setq calendar-date-display-form
        '((if dayname
              (concat dayname ", "))
          day " " monthname " " year))

  ;; 24-clock
  (setq calendar-time-display-form
        '(24-hours ":" minutes))

  ;; show week numbers
  (setq calendar-intermonth-text
        '(propertize
          (format "W%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))
#+END_SRC
* minor modes
** winner-mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC
** elisp
*** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'paredit-mode))
#+END_SRC
** prog
*** highlight
**** whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure t
    :config
    (setq whitespace-line-column 80)
    (setq whitespace-style '(face lines-tail))
    (add-hook 'prog-mode-hook 'whitespace-mode))
#+END_SRC
*** ws-butler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t)
  (add-hook 'prog-mode-hook #'ws-butler-mode)
#+END_SRC
*** hideshow
#+BEGIN_SRC emacs-lisp
  (setq hs-allow-nesting t)
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (eval-after-load 'prog-mode
    '(define-key prog-mode-map (kbd "C-<return>") 'hs-toggle-hiding))
#+END_SRC
*** before-save-hook
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t)
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC
** motion
*** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-'" . 'avy-goto-char-2)
    ("M-g f" . 'avy-goto-line))
#+END_SRC
*** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** editing
*** copying/pasting
#+BEGIN_SRC emacs-lisp
  (defun copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring.
        Ease of use features:
        - Move to start of next line.
        - Appends the copy on sequential calls.
        - Use newline as last char even on the last line of the buffer.
        - If region is active, copy its lines."
    (interactive "p")
    (let ((beg (line-beginning-position))
          (end (line-end-position arg)))
      (when mark-active
        (if (> (point) (mark))
            (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
          (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
      (if (eq last-command 'copy-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-ring-save beg end)))
    (kill-append "\n" nil)
    (beginning-of-line (or (and arg (1+ arg)) 2))
    (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))
  (global-set-key (kbd "C-c C-k") 'copy-line)
#+END_SRC
*** deletion
#+BEGIN_SRC emacs-lisp
  (defun hesam/kill-a-word (&optional args)
    (interactive "p")
    (forward-char 1)			;if at beg. of word
    (backward-word 1)
    (kill-word args)
    )
  (global-set-key (kbd "C-c d") 'hesam/kill-a-word)
#+END_SRC
*** transpose
#+BEGIN_SRC emacs-lisp
  (use-package transpose-mark
    :ensure t
    :bind ("C-x m" . 'transpose-mark-region))
#+END_SRC
*** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t)
#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :requires 'smartparens-config
    :config
    (add-hook 'python-mode-hook #'smartparens-mode))
#+END_SRC
** dired
*** dired-rsync
#+BEGIN_SRC emacs-lisp
  (use-package dired-rsync
    :ensure t
    :config
    (bind-key "C-c C-r" 'dired-rsync dired-mode-map))
#+END_SRC
*** dired-do-eshell
[[https://emacs.stackexchange.com/questions/30855/how-to-grep-marked-files-in-the-dired-mode-of-emacs][Stackoverflow]]
#+BEGIN_SRC emacs-lisp
  (defun dired-do-eshell-command (command)
    "Run an Eshell command on the marked files."
    (interactive "sEshell command: ")
    (let ((files (dired-get-marked-files t)))
      (eshell-command
       (format "%s %s" command (mapconcat #'identity files " ")))))
#+END_SRC
*** dired-open-
[[http://stackoverflow.com/a/1110487/311660][Stackoverflow]] thread.
#+BEGIN_SRC emacs-lisp
  (defun my-dired-find-file (&optional arg)
    "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
    (interactive "P")
    (mapc 'find-file (dired-get-marked-files nil arg)))

  (define-key dired-mode-map "F" 'my-dired-find-file)
#+END_SRC
*** openwith
#+BEGIN_SRC emacs-lisp
  (use-package openwith
    :ensure t
    :config
    (setq openwith-associations
          (list
           (list (openwith-make-extension-regexp
                  '("mpg" "mpeg" "mp3" "mp4"
                    "avi" "wmv" "wav" "mov" "flv"
                    "ogm" "ogg" "mkv" "rar"))
                 "mpv"
                 '(file))
           (list (openwith-make-extension-regexp
                  '("doc" "xls" "ppt" "odt" "ods" "odg" "odp"))
                 "libreoffice"
                 '(file))))
    (openwith-mode 1))


#+END_SRC
** visual fill mode
#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :ensure t)
  (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
  (setq fill-column 80)
#+END_SRC
** hungry deletion
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** search
*** visual-regexp
#+BEGIN_SRC emacs-lisp
;; (use-package visual-regexp-steroids
  ;;   :ensure t
  ;;   :bind
  ;;   ;; ("C-c m" . vr/mc-mark)
  ;;   ("C-r"   . vr/isearch-backward) 
  ;;   ("C-M-r"   . vr/isearch-backward)
  ;;   ("C-M-s"   . vr/isearch-forward)
  ;;   :config
  ;;   (use-package visual-regexp
  ;;     :ensure t))
#+END_SRC

*** anzu
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t)
  (global-set-key [remap query-replace] 'anzu-query-replace)
  (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
#+END_SRC
* appearance
** pretty-mode
#+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (pretty-deactivate-groups
     '(:logic :sets))
    (pretty-activate-groups
     '(:greek :arithmetic-nary))
    (add-hook 'python-mode-hook 'turn-on-pretty-mode))

  ;; (set-fontset-font "fontset-default" '(#x1d4d0 . #x1d4e2) "Symbola")
  (set-fontset-font "fontset-default" '(#x0192 . #x27fc) "DejaVu Sans Mono")
  (global-prettify-symbols-mode 1)

  (add-hook
   'python-mode-hook
   (lambda ()
     (mapc (lambda (pair) (push pair prettify-symbols-alist))
           '(;; Syntax
             ("def" .      #x0192)
             ;; ("not" .      #x2757)
             ("in" .       #x2208)
             ("not in" .   #x2209)
             ("return" .   #x27fc)
             ;; ("yield" .    #x27fb)
             ("for" .      #x2200)
             ("sum" .      #x2211)
             ;; Base Types
             ("int" .      #x2124)
             ("float" .    #x211d)
             ("str" .      #x1d54a)
             ("True" .     #x1d54b)
             ("False" .    #x1d53d)
             ;; Mypy
             ;; ("Dict" .     #x1d507)
             ;; ("List" .     #x2112)
             ;; ("Tuple" .    #x2a02)
             ;; ("Set" .      #x2126)
             ;; ("Iterable" . #x1d50a)
             ;; ("Any" .      #x2754)
             ;; ("Union" .    #x22c3)
             ))))

#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-dracula t)
    (doom-themes-org-config))
#+END_SRC
** bar-mode
#+BEGIN_SRC emacs-lisp
 (scroll-bar-mode -1)
 (show-paren-mode t)
 (tool-bar-mode -1)
 (menu-bar-mode -1)
#+END_SRC
** fonts
 #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil :family "Hack")
   (set-face-attribute 'fixed-pitch nil :family "Hack")
   (set-face-attribute 'variable-pitch nil
                       :family "Libre Baskerville"
                       :height 1.3)


   (setq hesam-default-hires-height 170)
   (setq hesam-default-lowres-height 120)

   (defun hesam/font-monitors ()
     "Loops through every frame and adjusts font size according to dimensions
           of the monitor it is attached to"
     (interactive)
     (if (display-graphic-p)			; check X-window
         (progn
           (dolist (elem (frame-list))	; for all frames
             (if (> (car (last (assq 'geometry (frame-monitor-attributes elem)))) 2000)
                 (set-face-attribute 'default elem :height hesam-default-hires-height)
               (set-face-attribute 'default elem :height hesam-default-lowres-height)))))
     (exwm-randr-refresh))

   (add-hook 'exwm-randr-screen-change-hook 'hesam/font-monitors)

   (defun hesam/font-per-display (frame)
     "Will change the font according to the dimensions of the monitor of focused
             frame"
     (select-frame frame)
     (if (display-graphic-p) 			; check X-window
         (progn
           (if (> (car (last (assq 'geometry (frame-monitor-attributes frame)))) 2000)
               (set-face-attribute 'default frame :height hesam-default-hires-height)
             (set-face-attribute 'default frame :height hesam-default-lowres-height)))))

   (add-hook 'after-make-frame-functions 'hesam/font-per-display)

   (setq ring-bell-function 'ignore)
 #+END_SRC
** cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (defun hesam/cursor ()
    (hl-line-mode t))
  (add-hook 'prog-mode-hook 'hesam/cursor)
  (add-hook 'shell-mode-hook 'hesam/cursor)
#+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (setq doom-modeline-buffer-file-name-style 'file-name
          doom-modeline-mu4e nil
          doom-modeline-env-version nil
          doom-modeline-buffer-encoding nil)
    :defer t
    :hook (after-init . doom-modeline-init))
#+END_SRC
** display-time
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-day-and-date nil)
(setq display-time-default-load-average nil)
(display-time)
#+END_SRC
** rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC
** hideshow ellipsis
#+BEGIN_SRC emacs-lisp
  (set-display-table-slot standard-display-table
                          'selective-display (string-to-vector " [+]"))


#+END_SRC
* display
** Frame
#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame
    :ensure t
    :bind ("C-x 4 t" . 'flop-frame))
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC
* org mode
** init
 #+begin_SRC emacs-lisp
   (use-package org
     :general
     ("C-c l" 'org-store-link)
     ("C-c c" 'org-capture)
     ("C-c a" 'org-agenda)
     :init
     (setq org-src-window-setup 'current-window)
     (setq org-directory "~/Dropbox/org"))
      #+END_SRC
** templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Dropbox/org/agenda/inbox.org" "Inbox")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/Dropbox/org/agenda/tickler.org" "Tickler")
                                 "* %i%? \n %U")))
#+END_SRC
** babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))
#+END_SRC
** agenda
*** files & keywords
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/org/agenda/gtd.org")
        org-default-notes-file "~/Dropbox/org/notes.org")

  (setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)")))

  (setq org-refile-targets '(("~/Dropbox/org/agenda/gtd.org" :maxlevel . 3)
                             ("~/Dropbox/org/agenda/someday.org" :level . 1)
                             ("~/Dropbox/org/agenda/tickler.org" :maxlevel . 2)))

  (setq org-refile-use-outline-path 'file)
  ;; makes org-refile outline working with helm/ivy
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)


#+END_SRC
*** key-binds
#+BEGIN_SRC emacs-lisp
  (defun hesam/inbox ()
    (interactive)
    (find-file-other-window (concat org-directory "/agenda/inbox.org")))

  (defun hesam/gtd ()
    (interactive)
    (find-file-other-frame (concat org-directory "/agenda/gtd.org")))

  (leader-super-agenda
    "i" 'hesam/inbox
    "g" 'hesam/gtd
    "c" 'org-capture
    "a" 'org-agenda
    "x"  'org-archive-subtree)

  (leader-super-agenda
    :keymaps 'org-mode-map
    "r" 'org-refile)
#+END_SRC
*** view
Start with current day and do not show tasks that
are done.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-start-on-weekday nil
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-show-all-dates t)
#+END_SRC

From emacs cafe [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][blog]] to get gtd context filtered
in the dispatcher.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("o" "Context office" tags-todo "@office"
           ((org-agenda-overriding-header "Office")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("h" "Context home" tags-todo "@home"
           ((org-agenda-overriding-header "Home")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
#+END_SRC
** hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'flyspell-mode)
#+END_SRC
** appearance
*** org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
*** misc
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        ;; org-bullets-bullet-list '(" ") 
        org-ellipsis "  "
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t)
#+END_SRC
*** face
#+BEGIN_SRC emacs-lisp
  ;; (mapc
  ;;  (lambda (face)
  ;;    (set-face-attribute face nil
  ;;                        :inherit 'fixed-pitch
  ;;                        :family "Source Code Pro"))
  ;;  (list 'org-code
  ;;        'org-hide
  ;;        'org-link 
  ;;        'org-block
  ;;        'org-verbatim
  ;;        'org-table
  ;;        'org-block-begin-line
  ;;        'org-block-end-line
  ;;        'org-meta-line
  ;;        'org-document-info-keyword))

  ;; (set-face-attribute 'org-level-1 nil
  ;;                     :height 1.7)

  ;; (set-face-attribute 'org-level-2 nil
  ;;                     :height 1.5)

  ;; (set-face-attribute 'org-level-3 nil
  ;;                     :height 1.3)

  ;; (set-face-attribute 'org-level-4 nil
  ;;                     :height 1.2)

  ;; (set-face-attribute 'org-level-5 nil
  ;;                     :height 1.1)
#+END_SRC
* expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :ensure t)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
    :ensure t)
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("s-o" . (lambda () (interactive) (ace-window 4))))
#+END_SRC
* bindings
#+BEGIN_SRC emacs-lisp
  ;; completion suggestions
  (global-set-key (kbd "C-c h") 'hippie-expand)

  ;; ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; disable suspend
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  ;; (eval-after-load "python"
  ;;     '(progn
  ;;        (define-key python-mode-map (kbd "M-n") 'python-nav-forward-defun)
  ;;        (define-key python-mode-map (kbd "M-p") 'python-nav-backward-defun)))
#+END_SRC
* server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
* ivy and friends
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :init
    (ido-mode 0)
    :bind
    ("C-x C-f" . 'counsel-find-file)
    ("M-x" . 'counsel-M-x)
    ("C-c g" . 'counsel-git)
    ("C-c j" . 'counsel-git-grep)
    ("C-c k" . 'counsel-ag)
    ("C-x l" . 'counsel-locate)
    ;; ("C-S-o" . 'counsel-rhythmbox)
    :config
    (ivy-mode 1)
    (counsel-mode 1)
    (setq ivy-re-builders-alist
          '((ivy-switch-buffer . ivy--regex-fuzzy)
            (swiper . ivy--regex)
            (t . ivy--regex-fuzzy))
          ivy-initial-inputs-alist nil
          enable-recursive-minibuffers t
          ivy-use-virtual-buffers t
          ivy-count-format "%d/%d "))

  ;; (use-package ivy-explorer
  ;;   :config
  ;;   (ivy-explorer-mode))

  (use-package flx)

  (use-package smex)

  (use-package swiper)

  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-keymap-prefix (kbd "C-c p")
          projectile-completion-system 'ivy
          projectile-indexing-method 'alien)
    :config
    (projectile-global-mode))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode 1))
#+END_SRC
* disabled
#+BEGIN_SRC emacs-lisp
  (put 'suspend-frame 'disabled t)
#+END_SRC
* undo-tree
#+BEGIN_SRC emacs-lisp
  ;; (use-package undo-tree
  ;;   :ensure t
  ;;   :bind ("M-/" . 'undo-tree-redo)
  ;;   :config
  ;;   (global-undo-tree-mode 1))
#+END_SRC
* company
General completion system.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind
    ("C-c n" . 'company-complete)
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** company-shell
Specific module for shell scripting.
#+BEGIN_SRC emacs-lisp
  (use-package company-shell
    :config
    (add-to-list 'company-backends 'company-shell))
#+END_SRC
* sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :ensure t
    :config
    (setq speedbar-use-images nil))
#+END_SRC
* pdf-tools
** init
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (define-key pdf-view-mode-map (kbd "C-r") 'isearch-backward))
#+END_SRC
** auxtex
#+BEGIN_SRC emacs-lisp
  ;; Use pdf-tools to open PDF files
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
             #'TeX-revert-document-buffer)
#+END_SRC
** hooks
We disable beacon-mode since it causes blinking.
#+BEGIN_SRC emacs-lisp
  (add-hook 'pdf-view-mode-hook (lambda () (setq-local beacon-mode nil)))
#+END_SRC
** midnight mode
#+BEGIN_SRC emacs-lisp
  ;;; set doom-theme colors for pdf-tools, the var expects cons
  (setq pdf-view-midnight-colors (cons (doom-color 'fg) (doom-color 'bg)))
#+END_SRC
* nov
** setup
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    (define-key nov-mode-map (kbd "C-s") 'isearch-forward)
    (define-key nov-mode-map (kbd "C-r") 'isearch-backward)
    (define-key nov-mode-map (kbd "g") 'keyboard-quit)
    (define-key nov-mode-map (kbd "s") 'isearch-forward)
    (define-key nov-mode-map (kbd "r") 'isearch-backward)
    (define-key nov-mode-map (kbd "d") 'define-word-at-point)
    (define-key nov-mode-map (kbd "D") 'define-word)
    (define-key nov-mode-map (kbd "n") 'scroll-up)
    (define-key nov-mode-map (kbd "p") 'scroll-down)
    (define-key nov-mode-map (kbd "l") 'recenter-top-bottom)
    (define-key nov-mode-map (kbd "f") 'forward-word)
    (define-key nov-mode-map (kbd "b") 'backward-word)
    (define-key nov-mode-map (kbd "N") 'nov-next-document)
    (define-key nov-mode-map (kbd "P") 'nov-previous-document))
#+END_SRC
** rendering
#+BEGIN_SRC emacs-lisp
  (defun my-nov-font-setup ()
    (setq nov-text-width most-positive-fixnum
          visual-fill-column-center-text t
          olivetti-body-width 0.6)
    (visual-line-mode)
    (visual-fill-column-mode)
    (variable-pitch-mode)
    (olivetti-mode))

  (add-hook 'nov-mode-hook 'my-nov-font-setup)
#+END_SRC
* define-word
#+BEGIN_SRC emacs-lisp
  (use-package define-word
    :ensure t)
#+END_SRC
* redshift
#+BEGIN_SRC emacs-lisp
    (defun hesam/day ()
      (interactive)
      (shell-command "redshift -x")
      (message nil))

    (defun hesam/night ()
      (interactive)
      (shell-command "redshift -x; redshift -O 2800 -b 0.5")
      (message nil))

    (defun hesam/dark ()
      (interactive)
      (shell-command "redshift -x; redshift -O 2000 -b 0.2")
      (message nil))
#+END_SRC
* prose
#+BEGIN_SRC emacs-lisp
  (defun hesam/prose ()
    (interactive)
    (setq org-hide-leading-stars nil)
    (face-remap-add-relative 'org-indent nil
                             :inherit '(org-hide fixed-pitch)
                             :height 0.1)
    (setq olivetti-body-width 0.6)
    (olivetti-mode)
    (org-restart-font-lock)
    (org-indent-mode -1)
    (variable-pitch-mode))
#+END_SRC
* olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t)
#+END_SRC
* programs
#+BEGIN_SRC emacs-lisp
  (call-process-shell-command "sleep 10; dropbox &" nil 0)
  (call-process-shell-command "unclutter --timeout 1 &" nil 0)
#+END_SRC
* eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :config
    (eyebrowse-mode t))
#+END_SRC
* shx
#+BEGIN_SRC emacs-lisp
  (use-package shx
    :init
    (add-hook 'shell-mode-hook  #'shx-mode))
#+END_SRC
* shell
** completion
Consider completions other than for binaries.
#+BEGIN_SRC emacs-lisp
  (setq shell-completion-execonly nil)
#+END_SRC
** history
Persistent bash history across sessions, from [[https://emacs.stackexchange.com/questions/9925/persistent-shell-command-history][stackexchange]].
#+BEGIN_SRC emacs-lisp
  (setenv "HISTFILE" "~/.bash_history")
  (defun turn-on-comint-history (history-file)
            (setq comint-input-ring-file-name history-file)
            (comint-read-input-ring 'silent))
  (add-hook 'shell-mode-hook
            (lambda ()
              (turn-on-comint-history (getenv "HISTFILE"))))
  (add-hook 'kill-buffer-hook #'comint-write-input-ring)
  (add-hook 'kill-emacs-hook
            (lambda ()
              (--each (buffer-list)
                (with-current-buffer it (comint-write-input-ring)))))
#+END_SRC
* narrow
Enable region narrowing.
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC
* history
#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
#+END_SRC
* purpose
Dedicate windows to only display certain types of buffers.
#+BEGIN_SRC emacs-lisp
  (use-package window-purpose
    :config
    (add-to-list 'purpose-user-mode-purposes '(python-mode . py))
    (add-to-list 'purpose-user-mode-purposes '(org-mode . org))
    (add-to-list 'purpose-user-mode-purposes '(shell-mode . shell))
    (add-to-list 'purpose-user-regexp-purposes '("Org" . org))
    (add-to-list 'purpose-user-name-purposes '("Chromium" . chrome))
    (purpose-compile-user-configuration)
    (purpose-mode t))
#+END_SRC
* auto-package-update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :init
    (setq auto-package-update-prompt-before-update t
          auto-package-update-delete-old-versions t
          auto-package-update-hide-results t))
#+END_SRC
* ediff
EXWM does not like the default option when using =ediff=,
 therefore we change it per the [[https://github.com/ch11ng/exwm/wiki][wiki]].
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
* objed
# #+BEGIN_SRC emacs-lisp
#   (use-package objed
#     :init
#     (objed-mode t)
#     :config
#     (global-set-key (kbd "M-n") 'objed-next-identifier)
#     (global-set-key (kbd "M-p") 'objed-prev-identifier))
# #+END_SRC
# * modules
* external files
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
  (load "~/dotfiles/emacs/.emacs.d/macros.el")
  (load "~/.emacs.d/local.el")
#+END_SRC
* flyspell
** flyspell-correct-popup
#+BEGIN_SRC emacs-lisp
  (use-package flyspell-correct-popup
    :bind ("C-M-;" . flyspell-correct-wrapper)
    :init
    (setq flyspell-correct-interface #'flyspell-correct-popup))
#+END_SRC
* auto-revert
#+BEGIN_SRC emacs-lisp
  (auto-revert-mode)
#+END_SRC
* Regexp
#+BEGIN_SRC emacs-lisp
  (general-def
    "C-s" 'isearch-forward-regexp
    "C-r" 'isearch-backward-regexp)
#+END_SRC
