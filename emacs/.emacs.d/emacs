-*- mode: org -*-

* APPERANCE
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
    :ensure t
    :config
    (load-theme 'base16-tomorrow-night t))
(add-to-list 'default-frame-alist '(font . "Source Code Pro"))
(scroll-bar-mode -1)
(show-paren-mode t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode 0)
(setq ring-bell-function 'ignore)
(set-fontset-font "fontset-default" 'unicode' "DejaVu Sans Mono")
(global-hl-line-mode 1)

(add-hook 'ansi-term-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode
                                                nil)))
(add-hook 'term-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode
                                                nil)))

(use-package beacon
   :ensure t
   :config
   (beacon-mode t))


(use-package powerline
    :ensure t
    :config
    (powerline-default-theme))


(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-default-load-average nil)
(display-time)


#+END_SRC

* FUNCTIONS
** Python
*** Shell
#+BEGIN_SRC emacs-lisp
;; Run python and pop-up its shell.
;; Kill process to solve the reload modules problem.
(defun my-python-shell-run ()
  (interactive)
  (when (get-buffer-process "*Python*")
     (set-process-query-on-exit-flag (get-buffer-process "*Python*") nil)
     (kill-process (get-buffer-process "*Python*"))
     ;; If you want to clean the buffer too.
     ;;(kill-buffer "*Python*")
     ;; Not so fast!
     (sleep-for 0.5))
  (run-python (python-shell-parse-command) nil nil)
  (python-shell-send-buffer)
  ;; Pop new window only if shell isnt visible
  ;; in any frame.
  (unless (get-buffer-window "*Python*" t) 
    (python-shell-switch-to-shell)))

(defun my-python-shell-run-region ()
  (interactive)
  (python-shell-send-region (region-beginning) (region-end))
  (python-shell-switch-to-shell))

(eval-after-load "python"
  '(progn
     (define-key python-mode-map (kbd "C-c C-c") 'my-python-shell-run)
     (define-key python-mode-map (kbd "C-c C-r") 'my-python-shell-run-region)
     (define-key python-mode-map (kbd "C-h f") 'python-eldoc-at-point)))
#+END_SRC
** Window
#+BEGIN_SRC emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(define-key ctl-x-4-map "t" 'toggle-window-split)
#+END_SRC
* MAGIT
#+BEGIN_SRC emacs-lisp
(use-package magit
    :ensure t)
#+END_SRC

* ORG MODE
#+BEGIN_SRC emacs-lisp
(use-package org
    :ensure t)
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(org-indent-mode 1)
(org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (sh . t)))
#+END_SRC

* EXPAND REGION
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :ensure t)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* LINUM
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
    :ensure t
    :config
    (add-hook 'python-mode-hook (lambda ()
                                      (linum-relative-mode t))))
#+END_SRC

* Hydra
#+BEGIN_SRC
(use-package hydra
    :ensure t)
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
(defun hydra-universal-argument (arg)
  (interactive "P")
  (setq prefix-arg (if (consp arg)
                       (list (* 4 (car arg)))
                     (if (eq arg '-)
                         (list -4)
                       '(4)))))

(defhydra hydra-window (global-map "C-M-o")
  "window"
  ("h" windmove-left "left")
  ("j" windmove-down "down")
  ("k" windmove-up "up")
  ("l" windmove-right "right")
  ("a" ace-window "ace")
  ("u" hydra-universal-argument "universal")
  ("s" (lambda () (interactive) (ace-window 4)) "swap")
  ("d" (lambda () (interactive) (ace-window 16)) "delete")
  )

(global-set-key (kbd "s-o") (lambda () (interactive) (ace-window 4)))
#+END_SRC
* BINDINGS
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-n") (lambda () (interactive) (scroll-up 5)))
(global-set-key (kbd "M-p") (lambda () (interactive) (scroll-down 5)))
#+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp
(require 'exwm)
(require 'exwm-config)
(require 'exwm-systemtray)
(exwm-config-default)
(exwm-systemtray-enable)
(setq exwm-systemtray-height 16)

(require 'exwm-randr)
(setq exwm-randr-workspace-output-plist '(1 "HDMI1" 2 "eDP1" 3 "DP2"))

(add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
             "xrandr" nil "xrandr --output HDMI1 --left-of eDP1 --auto; xrandr --output DP2 --right-of eDP1 --auto")))

(exwm-randr-enable)

;; alias screenup=" xrandr --output DP2 --mode 2560x1440 --right-of eDP1; xrandr --output HDMI1 --mode 2560x1440 --left-of eDP1"

(exwm-input-set-key (kbd "s-h") 'windmove-left)
(exwm-input-set-key (kbd "s-j") 'windmove-down)
(exwm-input-set-key (kbd "s-k") 'windmove-up)
(exwm-input-set-key (kbd "s-l") 'windmove-right)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-s") 'split-window-horizontally)
(exwm-input-set-key (kbd "s-v") 'split-window-vertically)
(exwm-input-set-key (kbd "s-d") 'kill-buffer-and-window)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-r") 'dmenu)
(exwm-input-set-key (kbd "s-f") 'exwm-reset)
#+END_SRC
* MISC
#+BEGIN_SRC emacs-lisp
;; autosave
(setq backup-directory-alist `((".*" . ,"~/.emacs.d/saves")))
(setq auto-save-file-name-transforms `((".*" ,"~/.emacs.d/backup" t)))
(use-package ivy
    :ensure t
    :config
    (ivy-mode t))
(ido-mode nil)
(use-package ivy-hydra
    :ensure t)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(setq shell-file-name "bash")
(setq shell-command-switch "-ic")
#+END_SRC
