-*- mode: org -*-

* modules
** customize
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC
* minor modes
** elisp
*** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'paredit-mode))
#+END_SRC
** Python
*** Shell
#+BEGIN_SRC emacs-lisp
;; Run python and pop-up its shell.
;; Kill process to solve the reload modules problem.
(defun my-python-shell-run ()
  (interactive)
  (when (get-buffer-process "*Python*")
     (set-process-query-on-exit-flag (get-buffer-process "*Python*") nil)
     (kill-process (get-buffer-process "*Python*"))
     ;; If you want to clean the buffer too.
     ;;(kill-buffer "*Python*")
     ;; Not so fast!
     (sleep-for 0.5))
  (run-python (python-shell-parse-command) nil nil)
  (python-shell-send-buffer)
  ;; Pop new window only if shell isnt visible
  ;; in any frame.
  (unless (get-buffer-window "*Python*" t)
    (python-shell-switch-to-shell)))

(defun my-python-shell-run-region ()
  (interactive)
  (python-shell-send-region (region-beginning) (region-end))
  (python-shell-switch-to-shell))

(eval-after-load "python"
  '(progn
     (define-key python-mode-map (kbd "C-c C-c") 'my-python-shell-run)
     (define-key python-mode-map (kbd "C-c C-r") 'my-python-shell-run-region)
     (define-key python-mode-map (kbd "C-h f") 'python-eldoc-at-point)))
#+END_SRC
** motion
*** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** editing
*** deletion
#+BEGIN_SRC emacs-lisp
  (defun hesam/kill-a-word (&optional args)
    (interactive "p")
    (forward-char 1)			;if at beg. of word
    (backward-word 1)
    (kill-word args)
    )
  (global-set-key (kbd "C-c d") 'hesam/kill-a-word)
#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (add-hook 'python-mode-hook #'smartparens-mode))
#+END_SRC
* apperance
** pretty-mode
#+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (pretty-deactivate-groups
     '(:logic :sets))
    (pretty-activate-groups
     '(:sub-and-superscripts :greek :arithmetic-nary))
    (add-hook 'python-mode-hook 'turn-on-pretty-mode))

  ;; (set-fontset-font "fontset-default" '(#x1d4d0 . #x1d4e2) "Symbola")
  (set-fontset-font "fontset-default" 'unicode' "Symbola")
  (global-prettify-symbols-mode 1)

  (add-hook
   'python-mode-hook
   (lambda ()
     (mapc (lambda (pair) (push pair prettify-symbols-alist))
	   '(;; Syntax
	     ("def" .      #x0192)
	     ;; ("not" .      #x2757)
	     ("in" .       #x2208)
	     ("not in" .   #x2209)
	     ("return" .   #x27fc)
	     ;; ("yield" .    #x27fb)
	     ("for" .      #x2200)
	     ("sum" .      #x2211)
	     ;; Base Types
	     ("int" .      #x2124)
	     ("float" .    #x211d)
	     ("str" .      #x1d54a)
	     ("True" .     #x1d54b)
	     ("False" .    #x1d53d)
	     ;; Mypy
	     ("Dict" .     #x1d507)
	     ("List" .     #x2112)
	     ("Tuple" .    #x2a02)
	     ("Set" .      #x2126)
	     ("Iterable" . #x1d50a)
	     ("Any" .      #x2754)
	     ("Union" .    #x22c3)))))

#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :diminish dashboard-mode
    :config
    (setq dashboard-startup-banner "~/dotfiles/emacs/.emacs.d/dashLogo.png")
    (setq dashboard-items '((agenda . 5)
			    (projects . 5)
			    (recents  . 5)))
    (dashboard-setup-startup-hook))
#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+END_SRC
** bar-mode
#+BEGIN_SRC emacs-lisp
 (scroll-bar-mode -1)
 (show-paren-mode t)
 (tool-bar-mode -1)
 (menu-bar-mode -1)
#+END_SRC
** fonts
 #+BEGIN_SRC emacs-lisp
   ;; (add-to-list 'default-frame-alist '(font . "Source Code Pro"))
   (set-face-attribute 'default nil
                       :family "Source Code Pro"
                       :height 160
                       :weight 'normal
                       :width 'normal)

   (setq ring-bell-function 'ignore)
   ;; (set-fontset-font "fontset-default" 'unicode' "DejaVu Sans Mono")


   (add-hook 'ansi-term-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode
                                                nil)))
   (add-hook 'term-mode-hook (lambda ()
                               (setq-local global-hl-line-mode
                                           nil)))
 #+END_SRC
** cursor
#+BEGIN_SRC emacs-lisp
(use-package beacon
   :ensure t
   :config
   (beacon-mode t))
(blink-cursor-mode 0)
(global-hl-line-mode t)
#+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :if window-system
    :config (setq-default powerline-default-separator 'nil))

  (use-package spaceline
    :after powerline
    :ensure t
    :config (setq spaceline-responsive nil))

  (use-package spaceline-all-the-icons
    :ensure t
    :after spaceline
    :config
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-modified
	  spaceline-all-the-icons-separator-type 'wave
	  )
    (spaceline-toggle-all-the-icons-buffer-path-off)
    (spaceline-toggle-all-the-icons-projectile-off)
    (spaceline-toggle-all-the-icons-buffer-size-off)
    (spaceline-toggle-all-the-icons-hud-off)
    (spaceline-all-the-icons--setup-git-ahead)
    (spaceline-all-the-icons-theme)
    )
#+END_SRC
** Display-time
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-default-load-average nil)
(display-time)
#+END_SRC

* functions
** Window
#+BEGIN_SRC emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(define-key ctl-x-4-map "t" 'toggle-window-split)
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC
* org mode
** init
 #+begin_SRC emacs-lisp
   (use-package org
     :ensure t
     :config
     (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
     (org-indent-mode t)
     (setq org-src-window-setup 'current-window)
   )
 #+END_SRC
** langs
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (sh . t)))

#+END_SRC
** org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :ensure t)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* linum
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
    :ensure t
    :config
    (add-hook 'python-mode-hook (lambda ()
                                      (linum-relative-mode t))))
#+END_SRC

* hydra
#+BEGIN_SRC
(use-package hydra
    :ensure t)
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("s-o" . (lambda () (interactive) (ace-window 4))))
#+END_SRC
* bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-n") (lambda () (interactive) (scroll-up 5)))
(global-set-key (kbd "M-p") (lambda () (interactive) (scroll-down 5)))
#+END_SRC
* exwm
#+BEGIN_SRC emacs-lisp
  (use-package exwm
      :ensure t)
  (require 'exwm-config)
  (require 'exwm-systemtray)
  (exwm-config-default)
  (exwm-systemtray-enable)
  (setq exwm-systemtray-height 16)
#+END_SRC
** xrandr
xrandr --output DP2 --mode 2560x1440 --right-of eDP1;
xrandr --output HDMI1 --mode 2560x1440 --left-of eDP1
#+BEGIN_SRC emacs-lisp
  (require 'exwm-randr)
  (setq exwm-randr-workspace-output-plist '(1 "HDMI1" 2 "eDP1" 3 "DP2"))
  (add-hook 'exwm-randr-screen-change-hook
	    (lambda ()
	      (start-process-shell-command
	       "xrandr" nil "xrandr --output HDMI1 --left-of eDP1 --auto; xrandr --output DP2 --right-of eDP1 --auto")))
  (exwm-randr-enable)
#+END_SRC
** binds
#+BEGIN_SRC emacs-lisp
(exwm-input-set-key (kbd "s-h") 'windmove-left)
(exwm-input-set-key (kbd "s-j") 'windmove-down)
(exwm-input-set-key (kbd "s-k") 'windmove-up)
(exwm-input-set-key (kbd "s-l") 'windmove-right)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-s") 'split-window-horizontally)
(exwm-input-set-key (kbd "s-v") 'split-window-vertically)
(exwm-input-set-key (kbd "s-d") 'kill-buffer-and-window)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-r") 'dmenu)
(exwm-input-set-key (kbd "s-f") 'exwm-reset)
#+END_SRC
* misc
#+BEGIN_SRC emacs-lisp
;; autosave
(setq backup-directory-alist `((".*" . ,"~/.emacs.d/saves")))
(setq auto-save-file-name-transforms `((".*" ,"~/.emacs.d/backup" t)))
#+END_SRC
* ivy and friends
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (ido-mode nil)
    :config
    (ivy-mode 1)
    (counsel-mode 1)
    (setq ivy-re-builders-alist
	  '((ivy-switch-buffer . ivy--regex-plus)
	    (t . ivy--regex-fuzzy))
	  ivy-initial-inputs-alist nil
	  ivy-use-virtual-buffers t
	  ivy-count-format "%d/%d "))

  (use-package ivy-hydra
    :ensure t)

  (use-package flx
    :ensure t)

  (use-package smex
    :ensure t)

  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (setq projectile-completion-system 'ivy)
    (projectile-global-mode))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode 1))
#+END_SRC
