-*- mode: org -*-

* APPERANCE
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
    :ensure t)
(load-theme 'base16-tomorrow-night t)
(add-to-list 'default-frame-alist '(font . "Dina"))
(scroll-bar-mode -1)
(show-paren-mode t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode 0)
(setq ring-bell-function 'ignore)
(set-fontset-font "fontset-default" 'unicode' "DejaVu Sans Mono")
(global-hl-line-mode 1)
(add-hook 'ansi-term-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode
                                                nil)))
(add-hook 'term-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode
                                                nil)))
(use-package beacon
   :ensure t 
   :config
   (beacon-mode t))


(require 'powerline)
(powerline-center-theme)


(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(display-time)


#+END_SRC

* FUNCTIONS
#+BEGIN_SRC emacs-lisp
;; ;; daw in vim
;; (defun hesam/kill-word (&optional arg)
;;   (interactive "p")
;;   (or arg (seq arg 1))
;;   (save-excursion
;;       (forward-char arg)
;;       (backward-word arg)
;;       (kill-word arg))))
;; (global-set-key (kbd "C-c C-k") 'hesam/kill-word)
#+END_SRC

* MAGIT
#+BEGIN_SRC emacs-lisp 
(use-package magit
    :ensure t)
#+END_SRC

* ORG MODE
#+BEGIN_SRC emacs-lisp
(use-package org
    :ensure t)
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(org-indent-mode 1)
(org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (sh . t)))
#+END_SRC

* EXPAND REGION
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :ensure t)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* LINUM
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
    :ensure t)
(linum-relative-global-mode)
#+END_SRC

* Hydra
#+BEGIN_SRC 
(use-package hydra
    :ensure t)
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
(defun hydra-universal-argument (arg)
  (interactive "P")
  (setq prefix-arg (if (consp arg)
                       (list (* 4 (car arg)))
                     (if (eq arg '-)
                         (list -4)
                       '(4)))))

(defhydra hydra-window (global-map "C-M-o")
  "window"
  ("h" windmove-left "left")
  ("j" windmove-down "down")
  ("k" windmove-up "up")
  ("l" windmove-right "right")
  ("a" ace-window "ace")
  ("u" hydra-universal-argument "universal")
  ("s" (lambda () (interactive) (ace-window 4)) "swap")
  ("d" (lambda () (interactive) (ace-window 16)) "delete")
  )

(global-set-key (kbd "C-s-h") 'hydra-window/windmove-left)
(global-set-key (kbd "C-s-j") 'hydra-window/windmove-down)
(global-set-key (kbd "C-s-k") 'hydra-window/windmove-up)
(global-set-key (kbd "C-s-l") 'hydra-window/windmove-right)
#+END_SRC
* BINDINGS
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-n") (lambda () (interactive) (scroll-up 5)))
(global-set-key (kbd "M-p") (lambda () (interactive) (scroll-down 5)))
#+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp
(require 'exwm)
(require 'exwm-config)
(require 'exwm-systemtray)
(exwm-config-default)
(exwm-systemtray-enable)
(setq exwm-systemtray-height 16)

(require 'exwm-randr)
(setq exwm-randr-workspace-output-plist '(1 "HDMI1" 2 "eDP1" 3 "DP2"))

(add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
             "xrandr" nil "xrandr --output HDMI1 --left-of eDP1 --auto; xrandr --output DP2 --right-of eDP1 --auto")))

(exwm-randr-enable)

;; alias screenup=" xrandr --output DP2 --mode 2560x1440 --right-of eDP1; xrandr --output HDMI1 --mode 2560x1440 --left-of eDP1"

(exwm-input-set-key (kbd "s-h") 'windmove-left)
(exwm-input-set-key (kbd "s-j") 'windmove-down)
(exwm-input-set-key (kbd "s-k") 'windmove-up)
(exwm-input-set-key (kbd "s-l") 'windmove-right)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-s") 'split-window-horizontally)
(exwm-input-set-key (kbd "s-v") 'split-window-vertically)
(exwm-input-set-key (kbd "s-d") 'delete-window)  
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-r") 'dmenu)
(exwm-input-set-key (kbd "s-f") 'exwm-reset)
#+END_SRC
* MISC
#+BEGIN_SRC emacs-lisp
;; autosave
(setq backup-directory-alist `((".*" . ,"~/.emacs.d/saves")))
(setq auto-save-file-name-transforms `((".*" ,"~/.emacs.d/backup" t)))
(use-package disable-mouse
    :ensure t
    :config 
    (global-disable-mouse-mode t))
(use-package ivy
    :ensure t
    :config
    (ivy-mode t))
(ido-mode nil)
(use-package ivy-hydra
    :ensure t)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(setq shell-file-name "bash")
(setq shell-command-switch "-ic")
#+END_SRC
