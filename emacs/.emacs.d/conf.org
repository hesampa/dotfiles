* calender
#+BEGIN_SRC emacs-lisp
  ;; start with Mon
  (setq calendar-week-start-day 1)

  ;; EU style
  (setq calendar-date-style 'european)

  ;; Date format
  (setq calendar-date-display-form
        '((if dayname
              (concat dayname ", "))
          day " " monthname " " year))

  ;; 24-clock
  (setq calendar-time-display-form
        '(24-hours ":" minutes))

  ;; show week numbers
  (setq calendar-intermonth-text
        '(propertize
          (format "W%2d"
                  (car
                   (calendar-iso-from-absolute
                    (calendar-absolute-from-gregorian (list month day year)))))
          'font-lock-face 'calendar-iso-week-face))
#+END_SRC
* modules
** customize
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC
* minor modes
** winner-mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC
** elisp
*** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'paredit-mode))
#+END_SRC
** prog
*** highlight
**** whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure t
    :config
    (setq whitespace-line-column 80)
    (setq whitespace-style '(face lines-tail))
    (add-hook 'prog-mode-hook 'whitespace-mode))
#+END_SRC
*** ws-butler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t)
  (add-hook 'prog-mode-hook #'ws-butler-mode)
#+END_SRC
** Python
*** Shell
#+BEGIN_SRC emacs-lisp
  ;; ignore readline warning
  (setq python-shell-completion-native-enable nil)

  ;; Run python and pop-up its shell.
  ;; Kill process to solve the reload modules problem.
  (defun my-python-shell-run ()
    (interactive)
    (when (get-buffer-process "*Python*")
       (set-process-query-on-exit-flag (get-buffer-process "*Python*") nil)
       (kill-process (get-buffer-process "*Python*"))
       ;; If you want to clean the buffer too.
       ;;(kill-buffer "*Python*")
       ;; Not so fast!
       (sleep-for 0.5))
    (run-python (python-shell-parse-command) nil nil)
    (python-shell-send-buffer)
    ;; Pop new window only if shell isnt visible
    ;; in any frame.
    (unless (get-buffer-window "*Python*" t)
      (python-shell-switch-to-shell)))

  (defun my-python-shell-run-region ()
    (interactive)
    (python-shell-send-region (region-beginning) (region-end))
    (python-shell-switch-to-shell))

  (eval-after-load "python"
    '(progn
       (define-key python-mode-map (kbd "C-c C-c") 'my-python-shell-run)
       (define-key python-mode-map (kbd "C-c C-r") 'my-python-shell-run-region)
       (define-key python-mode-map (kbd "C-h f") 'python-eldoc-at-point)))

  (add-hook 'inferior-python-mode-hook
            (lambda ()
              (setq comint-move-point-for-output t)))

#+END_SRC
*** before-save-hook
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t)
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC
** motion
*** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-'" . 'avy-goto-char-2)
    ("M-g f" . 'avy-goto-line))
#+END_SRC
*** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** editing
*** copying/pasting
#+BEGIN_SRC emacs-lisp
  (defun copy-line (arg)
    "Copy lines (as many as prefix argument) in the kill ring.
        Ease of use features:
        - Move to start of next line.
        - Appends the copy on sequential calls.
        - Use newline as last char even on the last line of the buffer.
        - If region is active, copy its lines."
    (interactive "p")
    (let ((beg (line-beginning-position))
          (end (line-end-position arg)))
      (when mark-active
        (if (> (point) (mark))
            (setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
          (setq end (save-excursion (goto-char (mark)) (line-end-position)))))
      (if (eq last-command 'copy-line)
          (kill-append (buffer-substring beg end) (< end beg))
        (kill-ring-save beg end)))
    (kill-append "\n" nil)
    (beginning-of-line (or (and arg (1+ arg)) 2))
    (if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))
  (global-set-key (kbd "C-c C-k") 'copy-line)
#+END_SRC
*** deletion
#+BEGIN_SRC emacs-lisp
  (defun hesam/kill-a-word (&optional args)
    (interactive "p")
    (forward-char 1)			;if at beg. of word
    (backward-word 1)
    (kill-word args)
    )
  (global-set-key (kbd "C-c d") 'hesam/kill-a-word)
#+END_SRC
*** transpose
#+BEGIN_SRC emacs-lisp
  (use-package transpose-mark
    :ensure t
    :bind ("C-x m" . 'transpose-mark-region))
#+END_SRC
** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (add-hook 'python-mode-hook #'smartparens-mode))
#+END_SRC
* apperance
** pretty-mode
#+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (pretty-deactivate-groups
     '(:logic :sets))
    (pretty-activate-groups
     '(:greek :arithmetic-nary))
    (add-hook 'python-mode-hook 'turn-on-pretty-mode))

  ;; (set-fontset-font "fontset-default" '(#x1d4d0 . #x1d4e2) "Symbola")
  (set-fontset-font "fontset-default" '(#x0192 . #x27fc) "DejaVu Sans Mono")
  (global-prettify-symbols-mode 1)

  (add-hook
   'python-mode-hook
   (lambda ()
     (mapc (lambda (pair) (push pair prettify-symbols-alist))
           '(;; Syntax
             ("def" .      #x0192)
             ;; ("not" .      #x2757)
             ("in" .       #x2208)
             ("not in" .   #x2209)
             ("return" .   #x27fc)
             ;; ("yield" .    #x27fb)
             ("for" .      #x2200)
             ("sum" .      #x2211)
             ;; Base Types
             ("int" .      #x2124)
             ("float" .    #x211d)
             ("str" .      #x1d54a)
             ("True" .     #x1d54b)
             ("False" .    #x1d53d)
             ;; Mypy
             ;; ("Dict" .     #x1d507)
             ;; ("List" .     #x2112)
             ;; ("Tuple" .    #x2a02)
             ;; ("Set" .      #x2126)
             ;; ("Iterable" . #x1d50a)
             ;; ("Any" .      #x2754)
             ;; ("Union" .    #x22c3)
             ))))

#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :diminish dashboard-mode
    :config
    (setq dashboard-startup-banner "~/dotfiles/emacs/.emacs.d/dashLogo.png")
    (setq dashboard-items '((agenda . 5)
			    (projects . 5)
			    (recents  . 5)))
    (dashboard-setup-startup-hook))
#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+END_SRC
** bar-mode
#+BEGIN_SRC emacs-lisp
 (scroll-bar-mode -1)
 (show-paren-mode t)
 (tool-bar-mode -1)
 (menu-bar-mode -1)
#+END_SRC
** fonts
 #+BEGIN_SRC emacs-lisp
   ;; (add-to-list 'default-frame-alist '(font . "Source Code Pro"))
   (set-face-attribute 'default nil
                       :family "Source Code Pro"
                       :height 130
                       :weight 'normal
                       :width 'normal)

   (setq ring-bell-function 'ignore)
   ;; (set-fontset-font "fontset-default" 'unicode' "DejaVu Sans Mono")


   (add-hook 'ansi-term-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode nil)
                                    (setq buffer-face-mode-face
                                                '(:family "Source Code Pro" :height 100)
                                                (buffer-face-mode))))


   (add-hook 'dired-mode-hook (lambda ()
                                (setq-local buffer-face-mode-face
                                            '(:family "Source Code Pro" :height 100))
                                (buffer-face-mode)))
 #+END_SRC
** cursor
#+BEGIN_SRC emacs-lisp
(use-package beacon
   :ensure t
   :config
   (beacon-mode t))
(blink-cursor-mode 0)
(global-hl-line-mode t)
#+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :if window-system
    :config (setq-default powerline-default-separator 'nil))

  (use-package spaceline
    :after powerline
    :ensure t
    :config (setq spaceline-responsive nil))

  (use-package spaceline-all-the-icons
    :ensure t
    :after spaceline
    :config
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-modified
	  spaceline-all-the-icons-separator-type 'wave
	  )
    (spaceline-toggle-all-the-icons-buffer-path-off)
    (spaceline-toggle-all-the-icons-projectile-off)
    (spaceline-toggle-all-the-icons-buffer-size-off)
    (spaceline-toggle-all-the-icons-hud-off)
    (spaceline-all-the-icons--setup-git-ahead)
    (spaceline-all-the-icons-theme)
    )
#+END_SRC
** Display-time
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-default-load-average nil)
(display-time)
#+END_SRC

* Display
** Frame
#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame
    :ensure t
    :bind ("C-x 4 t" . 'flop-frame))
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC
* org mode
** init
 #+begin_SRC emacs-lisp
   (use-package org
     :ensure t
     :bind
     ("C-c l" . 'org-store-link)
     ("C-c c" . 'org-capture)
     ("C-c a" . 'org-agenda)
     ("C-c b" . 'org-iswitchb)
     :config
     (setq org-src-window-setup 'current-window
           org-startup-indented t
           org-log-into-drawer t
           org-log-reschedule 'time
           org-log-done 'time
           org-directory "~/Dropbox/org"
           org-agenda-files '("~/Dropbox/org/agenda")
           org-default-notes-file (concat org-directory "/agenda/current.org")))

 #+END_SRC
** langs
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (shell . t)))
#+END_SRC
** org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* expand region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
    :ensure t)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

* hydra
#+BEGIN_SRC
(use-package hydra
    :ensure t)
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("s-o" . (lambda () (interactive) (ace-window 4))))
#+END_SRC
* bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-n") (lambda () (interactive) (scroll-up 5)))
  (global-set-key (kbd "M-p") (lambda () (interactive) (scroll-down 5)))

  ;; completion suggestions
  (global-set-key (kbd "C-c C-n") 'hippie-expand)

  ;; ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer-other-window)

  ;; disable suspend
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+END_SRC
* exwm
** init
#+BEGIN_SRC emacs-lisp
  (use-package exwm
      :ensure t)
  (use-package dmenu
    :ensure t)
  (require 'exwm-config)
  (require 'exwm-systemtray)
  (exwm-config-default)
  (exwm-systemtray-enable)
  (setq exwm-systemtray-height 16)
#+END_SRC
** xrandr
xrandr --output DP2 --mode 2560x1440 --right-of eDP1;
xrandr --output HDMI1 --mode 2560x1440 --left-of eDP1
#+BEGIN_SRC emacs-lisp
  (require 'exwm-randr)
  (setq exwm-randr-workspace-output-plist '(1 "HDMI1" 2 "eDP1" 3 "DP2"))
  (add-hook 'exwm-randr-screen-change-hook
	    (lambda ()
	      (start-process-shell-command
	       "xrandr" nil "xrandr --output HDMI1 --left-of eDP1 --auto; xrandr --output DP2 --right-of eDP1 --auto")))
  (exwm-randr-enable)
#+END_SRC
** binds
*** window
#+BEGIN_SRC emacs-lisp
(exwm-input-set-key (kbd "s-h") 'windmove-left)
(exwm-input-set-key (kbd "s-j") 'windmove-down)
(exwm-input-set-key (kbd "s-k") 'windmove-up)
(exwm-input-set-key (kbd "s-l") 'windmove-right)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-s") 'split-window-horizontally)
(exwm-input-set-key (kbd "s-v") 'split-window-vertically)
(exwm-input-set-key (kbd "s-d") 'kill-buffer-and-window)
(exwm-input-set-key (kbd "s-K") 'buf-move-up)
(exwm-input-set-key (kbd "s-J") 'buf-move-down)
(exwm-input-set-key (kbd "s-H") 'buf-move-left)
(exwm-input-set-key (kbd "s-L") 'buf-move-right)
(exwm-input-set-key (kbd "s-f") 'exwm-reset)
#+END_SRC
*** applications
#+BEGIN_SRC emacs-lisp
  (exwm-input-set-key (kbd "s-c")
                      (lambda () (interactive) (start-process "" nil "chromium")))
  (exwm-input-set-key (kbd "s-a")
                      (lambda () (interactive) (start-process "" nil "alacritty")))
  (exwm-input-set-key (kbd "s-r") 'dmenu)
  
  ;; toggle layout
  (defun hesam/keybr-toggle-layout ()
    (interactive)
    (shell-command "(setxkbmap -query | grep -q 'layout:.*us') && setxkbmap se || setxkbmap us"))
  (exwm-input-set-key (kbd "s-t") 'hesam/keybr-toggle-layout)
#+END_SRC
* misc
#+BEGIN_SRC emacs-lisp
  ;; autosave
  (setq backup-directory-alist `((".*" . ,"~/.emacs.d/saves")))
  (setq auto-save-file-name-transforms `((".*" ,"~/.emacs.d/backup" t)))
#+END_SRC
* ivy and friends
#+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :init
     (ido-mode nil)
     :bind
     ("C-x C-f" . 'counsel-find-file)
     ("M-x" . 'counsel-M-x)
     :config
     (ivy-mode 1)
     (counsel-mode 1)
     (setq ivy-re-builders-alist
           '((ivy-switch-buffer . ivy--regex-fuzzy)
             (t . ivy--regex-fuzzy))
           enable-recursive-minibuffers t
           ivy-initial-inputs-alist nil
           ivy-use-virtual-buffers t
           ivy-count-format "%d/%d "))

   (use-package ivy-hydra
     :ensure t)

   (use-package flx
     :ensure t)

   (use-package smex
     :ensure t)

   (put 'upcase-region 'disabled nil)
   (put 'downcase-region 'disabled nil)
#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (setq projectile-completion-system 'ivy)
    (projectile-global-mode))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode 1))
#+END_SRC
* disabled
#+BEGIN_SRC emacs-lisp
  (put 'suspend-frame 'disabled t)
#+END_SRC
* undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind ("M-/" . 'undo-tree-redo)
    :config
    (global-undo-tree-mode 1))
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind
    ("C-x C-n" . 'company-complete)
    :config
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
